[
    {
        "label": "Benchmarking",
        "importPath": "benchmarking",
        "description": "benchmarking",
        "isExtraImport": true,
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "SortMethods",
        "importPath": "sort_methods",
        "description": "sort_methods",
        "isExtraImport": true,
        "detail": "sort_methods",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "GraficoPersonalizado",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class GraficoPersonalizado:\n    def __init__(self):\n        self.tamanos = [5000, 10000, 30000, 50000, 100000]\n        self.benchmark = Benchmarking()\n        self.sorter = SortMethods()\n        self.metodos_dict = {\n            \"burbuja\": self.sorter.sort_bubble,\n            \"bubbleMejorado\": self.sorter.sort_bubble_optimized,\n            \"seleccion\": self.sorter.sort_selection,\n            \"insercion\": self.sorter.sort_insertion,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Benchmarking",
        "kind": 6,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "class Benchmarking:\n    def medir_tiempo(self, func: Callable[[List[int]], List[int]], array: List[int]) -> float:\n        inicio = time.perf_counter()\n        func(array)\n        fin = time.perf_counter()\n        return fin - inicio",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "SortMethods",
        "kind": 6,
        "importPath": "sort_methods",
        "description": "sort_methods",
        "peekOfCode": "class SortMethods:\n    def sort_bubble(self, array):\n        arreglo = array.copy()\n        for i in range(len(arreglo)):\n            for j in range(i+1, len(arreglo)):\n                if arreglo[i] > arreglo[j]:\n                    arreglo[i], arreglo[j] = arreglo[j], arreglo[i]\n        return arreglo\n    def sort_bubble_optimized(self, array):\n        arreglo = array.copy()",
        "detail": "sort_methods",
        "documentation": {}
    }
]